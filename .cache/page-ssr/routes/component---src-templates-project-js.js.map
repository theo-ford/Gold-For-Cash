{"version":3,"file":"component---src-templates-project-js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAA4C;AAErC,SAASE,aAAaA,CAACC,KAAK,EAAE;EACnC,MAAM;IAAA,GAACC,OAAO;IAAA,GAAEC;EAAU,IAAIL,+CAAQ,CAAC,KAAK,CAAC;EAE7CC,gDAAS,CAAC,MAAM;IACd,MAAMK,KAAK,GAAGC,MAAM,CAACC,UAAU,CAACL,KAAK,CAAC;IACtC,IAAIG,KAAK,CAACF,OAAO,KAAKA,OAAO,EAAE;MAC7BC,UAAU,CAACC,KAAK,CAACF,OAAO,CAAC;IAC3B;IACA,MAAMK,QAAQ,GAAGA,CAAA,KAAM;MACrBJ,UAAU,CAACC,KAAK,CAACF,OAAO,CAAC;IAC3B,CAAC;IACDE,KAAK,CAACI,WAAW,CAACD,QAAQ,CAAC;IAC3B,OAAO,MAAMH,KAAK,CAACK,cAAc,CAACF,QAAQ,CAAC;EAC7C,CAAC,EAAE,CAACL,OAAO,EAAED,KAAK,CAAC,CAAC;EAEpB,OAAOC,OAAO;AAChB;;;;;;;;;;;;;;;AClBO,MAAMQ,gBAAgB,GAAIC,KAAK,IAAK;EACzC,MAAMC,gBAAgB,GAAGD,KAAK,CAACE,UAAU,CAACC,KAAK,GAAGH,KAAK,CAACE,UAAU,CAACE,MAAM;EACzE,MAAMC,aAAa,GAAGL,KAAK,CAACE,UAAU,CAACC,KAAK,KAAKH,KAAK,CAACE,UAAU,CAACE,MAAM;EAExE,IAAIH,gBAAgB,KAAK,IAAI,EAAE;IAC9B;IACC,OAAO,WAAW;EACpB,CAAC,MACI,IAAII,aAAa,KAAK,IAAI,EAAE;IAChC;IACA,OAAO,QAAQ;EAChB,CAAC,MACI;IACJ;IACC,OAAO,UAAU;EACnB;AACF,CAAC;;;;;;;;;;;;;;;;;;;;;;;AChBkD;AACZ;AACa;AACd;AACmC;AACX;AACvB;AACvC;AACA;AAC6D;AAE7D,MAAMQ,OAAO,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC5B,oBAAOR,0DAAA,YAAG,SAAU,CAAC;AACvB,CAAC;AAED,iEAAeE,kEAAW,CAACK,OAAO,CAAC,EAAC;AAE7B,MAAMvB,KAAK,eA6BjB","sources":["webpack://studio-prismic-starter/./src/components/tf/media-query.js","webpack://studio-prismic-starter/./src/components/utils/image-orientation.js","webpack://studio-prismic-starter/./src/templates/project.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport function useMediaQuery(query) {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    if (media.matches !== matches) {\n      setMatches(media.matches);\n    }\n    const listener = () => {\n      setMatches(media.matches);\n    };\n    media.addListener(listener);\n    return () => media.removeListener(listener);\n  }, [matches, query]);\n\n  return matches;\n}\n","export const ImageOrientation = (image) => {\n  const isImageLandscape = image.dimensions.width > image.dimensions.height;\n  const isImageSquare = image.dimensions.width === image.dimensions.height;\n\n  if (isImageLandscape === true) {\n  \t// console.log(\"landscape\");\n    return \"landscape\";\n  } \n  else if (isImageSquare === true) {\n  \t// console.log(\"square\");\n  \treturn \"square\"\n  }\n  else {\n  \t// console.log(\"portrait\");\n    return \"portrait\";\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport { withPreview } from \"gatsby-source-prismic\";\nimport { Helmet } from \"react-helmet\";\nimport { ImageOrientation } from \"../components/utils/image-orientation\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport ReactPlayer from \"react-player\";\n// import { VideoComponent } from \"../components/tf/video_component\";\n// import { VideoComponentNoControls } from \"../components/tf/video-component-no-controls\";\nimport { useMediaQuery } from \"../components/tf/media-query\";\n\nconst Project = ({ data }) => {\n  return <p>testing</p>;\n};\n\nexport default withPreview(Project);\n\nexport const query = graphql`\n  query Artists($uid: String!) {\n    prismicProject(uid: { eq: $uid }) {\n      uid\n      id\n      data {\n        title {\n          text\n          html\n        }\n        about {\n          html\n          text\n        }\n        client {\n          html\n          text\n        }\n        project_type {\n          html\n          text\n        }\n        team {\n          html\n          text\n        }\n      }\n    }\n  }\n`;\n"],"names":["useState","useEffect","useMediaQuery","query","matches","setMatches","media","window","matchMedia","listener","addListener","removeListener","ImageOrientation","image","isImageLandscape","dimensions","width","height","isImageSquare","React","Link","withPreview","Helmet","styled","createGlobalStyle","ReactPlayer","Project","data","createElement"],"sourceRoot":""}